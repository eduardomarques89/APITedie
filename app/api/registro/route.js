import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Configura√ß√£o de CORS
const headers = {
  "Access-Control-Allow-Origin": "*",  // Permite requisi√ß√µes de qualquer origem
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",  // M√©todos permitidos
  "Access-Control-Allow-Headers": "Content-Type, Authorization",  // Cabe√ßalhos permitidos
};

// Lida com requisi√ß√µes OPTIONS para CORS
export async function OPTIONS() {
  return new Response(null, {
    status: 204,
    headers
  });
}

// Registro de usu√°rio
export async function POST(req) {
  try {
    // Obt√©m os dados da requisi√ß√£o
    const body = await req.json();
    console.log("üì© Dados recebidos:", body);

    // Desestrutura os campos do body
    const { nome, cpf, email, senha, telefone } = body;

    // Verifica√ß√£o de campos obrigat√≥rios
    if (!nome || !cpf || !email || !senha) {
      return new Response(
        JSON.stringify({ message: 'Nome, CPF, email e senha s√£o obrigat√≥rios' }),
        {
          status: 400,
          headers
        }
      );
    }

    // Verifica se o usu√°rio j√° existe (CPF ou email)
    const existingUser = await prisma.usuarios.findFirst({
      where: {
        OR: [{ email }, { cpf }]
      }
    });

    if (existingUser) {
      return new Response(
        JSON.stringify({ message: 'Usu√°rio j√° cadastrado com este email ou CPF' }),
        {
          status: 400,
          headers
        }
      );
    }

    // Criptografa a senha
    const hashedSenha = bcrypt.hashSync(senha, 10);

    // Cria o usu√°rio no banco de dados
    const newUser = await prisma.usuarios.create({
      data: {
        nome,
        cpf,
        email,
        senha: hashedSenha,
        telefone: telefone || null,  // Define como null se n√£o for enviado
        endereco: null,              // Mant√©m opcional
        tipo_usuario: "cliente",     // Define como "cliente" por padr√£o
        data_criacao: new Date()     // Data de cria√ß√£o atual
      }
    });

    // Verifica se o usu√°rio foi criado corretamente
    if (!newUser || !newUser.id) {
      throw new Error("Erro ao criar usu√°rio no banco de dados");
    }

    // Gera um token JWT para autentica√ß√£o
    const token = jwt.sign(
      { id: newUser.id, email: newUser.email },
      'secreto',  // Substitua por uma vari√°vel de ambiente em produ√ß√£o
      { expiresIn: '1h' }
    );

    // Resposta de sucesso
    return new Response(
      JSON.stringify({
        status: "success",
        message: "Usu√°rio registrado com sucesso",
        data: { token }
      }, null, 2),  // Indenta o JSON para melhor leitura
      {
        status: 201,
        headers
      }
    );

  } catch (error) {
    console.error("‚ùå Erro no servidor:", error);

    return new Response(
      JSON.stringify({
        message: 'Erro no servidor',
        error: error.message
      }),
      {
        status: 500,
        headers
      }
    );
  }
}
